Sort by multiple keys:
s = sorted(s, key = lambda x: (x[1], x[2]))

XOR operator:
x ^ 0 = x
x ^ x = 0 // even
x ^ x ^ x = x // odd


Note:

- Sliding window or keep two indices pointing to the start and end is a great way to iterate an array in linear time. This is also used in questions like “find 2 numbers in a sorted array that sum to M”.
- When you need to compare things regardless of order (like anagram), you may consider hash, hash map.

- When stuck, answer outloud 3 questions: what you are working on, what’s your current problem and what doesn’t work.




Iterative String traversal:

Inorder:
s = []
node = head
while len(s) != 0 or node != null:
  if node != null:
    s.append(node)
    node = node.left
  else:
    node = s.pop()
    print(node.val)
    node = node.right
    
Preorder:
s = []
s.append(head)
while len(s) != 0:
  node = s.pop()
  print(node.val)
  if node.left != None:
    s.append(node.left)
  if node.right != None:
    s.append(node.right)
    
Postorder:

s = []
t = [] # output stack

while len(s) != 0:
  node = s.pop()
  t.push(node)
  if node.left != null:
    s.push(node.left)
  if node.right != null:
    s.push(node.right)
    
while t is not empty:
  node = t.pop()
  print(node.val)
    

